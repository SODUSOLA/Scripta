openapi: 3.0.3
info:
  title: Scripta API Documentation
  version: 1.0.0
  description: Endpoints for the Scripta application

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: babajide
                email:
                  type: string
                  example: babajide@example.com
                password:
                  type: string
                  format: password
                  example: strongpass123
                confirmPassword:
                  type: string
                  format: password
                  example: strongpass123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Validation or existing user error

  /api/auth/login:
    post:
      summary: Log in user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: username or email
                  example: babajide
                password:
                  type: string
                  format: password
                  example: strongpass123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Invalid credentials

  /api/auth/verify-login:
    post:
      summary: Verify login from new device
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: babajide@example.com
                code:
                  type: string
                  example: 123456
      responses:
        '200':
          description: Login verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login verified
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Invalid code or email

  /api/me:
    get:
      summary: Get current user
      description: Returns the decoded JWT user info
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      username: { type: string }
                      email: { type: string }
        '401':
          description: Unauthorized â€” missing or invalid token

  /api/sessions:
    get:
      summary: Get active sessions for the current user
      tags: [Sessions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Active sessions retrieved
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        ipAddress:
                          type: string
                        userAgent:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '500':
          description: Failed to fetch sessions

  /api/sessions/{id}:
    delete:
      summary: Revoke a session
      tags: [Sessions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID to revoke
      responses:
        '200':
          description: Session revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Session revoked successfully
        '404':
          description: Session not found
        '500':
          description: Failed to revoke session

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
