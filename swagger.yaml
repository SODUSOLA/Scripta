openapi: 3.0.3
info:
  title: Scripta API Documentation
  version: 1.0.0
  description: Endpoints for the Scripta application

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: babajide
                email:
                  type: string
                  example: babajide@example.com
                password:
                  type: string
                  format: password
                  example: strongpass123
                confirmPassword:
                  type: string
                  format: password
                  example: strongpass123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Validation or existing user error

  /api/auth/login:
    post:
      summary: Log in user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: username or email
                  example: babajide
                password:
                  type: string
                  format: password
                  example: e123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Invalid credentials

  /api/auth/verify-login:
    post:
      summary: Verify login from new device
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: babajide@example.com
                code:
                  type: string
                  example: 123456
      responses:
        '200':
          description: Login verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login verified
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        '400':
          description: Invalid code or email

  /api/me:
    get:
      summary: Get current user
      description: Returns the decoded JWT user info
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      username: { type: string }
                      email: { type: string }
        '401':
          description: Unauthorized â€” missing or invalid token

  /api/sessions:
    get:
      summary: Get active sessions for the current user
      tags: [Sessions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Active sessions retrieved
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        ipAddress:
                          type: string
                        userAgent:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '500':
          description: Failed to fetch sessions

  /api/sessions/{id}:
    delete:
      summary: Revoke a session
      tags: [Sessions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID to revoke
      responses:
        '200':
          description: Session revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Session revoked successfully
        '404':
          description: Session not found
        '500':
          description: Failed to revoke session

  /api/auth/request-reset:
    post:
      summary: Request password reset
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: babajide@example.com
      responses:
        '200':
          description: Password reset code sent to email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset code sent to your email
        '400':
          description: User not found

  /api/auth/reset-password:
    post:
      summary: Reset password with code
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: babajide@example.com
                code:
                  type: string
                  example: 123456
                newPassword:
                  type: string
                  format: password
                  example: newstrongpass123
                confirmPassword:
                  type: string
                  format: password
                  example: newstrongpass123
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
        '400':
          description: Invalid code, expired code, or passwords do not match

  /api/auth/change-password:
    post:
      summary: Change password
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: oldpass123
                newPassword:
                  type: string
                  format: password
                  example: newpass123
                confirmPassword:
                  type: string
                  format: password
                  example: newpass123
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        '400':
          description: Invalid old password or passwords do not match

  /api/drafts:
    post:
      summary: Create a new draft
      tags: [Drafts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My First Post
                content:
                  type: string
                  example: This is a draft post content
                platform:
                  type: string
                  enum: [X, LinkedIn, Facebook, Instagram]
                  example: X
                tone:
                  type: string
                  example: Professional
      responses:
        '201':
          description: Draft created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Draft created successfully
                  draft:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Validation error

    get:
      summary: Get all drafts for the current user
      tags: [Drafts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Drafts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Drafts retrieved successfully
                  drafts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        platform:
                          type: string
                        tone:
                          type: string
                        createdAt:
                          type: string
                          format: date-time

  /api/drafts/{id}:
    get:
      summary: Get a specific draft by ID
      tags: [Drafts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Draft ID
      responses:
        '200':
          description: Draft retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Draft retrieved successfully
                  draft:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '404':
          description: Draft not found

    patch:
      summary: Update a draft
      tags: [Drafts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Draft ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Title
                content:
                  type: string
                  example: Updated content
                platform:
                  type: string
                  enum: [X, LinkedIn, Facebook, Instagram]
                  example: LinkedIn
                tone:
                  type: string
                  example: Casual
      responses:
        '200':
          description: Draft updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Draft updated successfully
                  draft:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time
        '404':
          description: Draft not found

    delete:
      summary: Delete a draft
      tags: [Drafts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Draft ID
      responses:
        '200':
          description: Draft deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Draft deleted successfully
        '404':
          description: Draft not found

  /api/ai/generate:
    post:
      summary: Generate a new AI post draft
      tags: [AI]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  example: Benefits of remote work
                tone:
                  type: string
                  example: Professional
                platform:
                  type: string
                  enum: [X, LinkedIn, Facebook, Instagram]
                  example: LinkedIn
                forceQueue:
                  type: boolean
                  default: false
                  example: false
                  description: Force asynchronous processing via job queue
      responses:
        '201':
          description: AI generation completed synchronously
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: AI generation completed
                  draft:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      generated:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
        '202':
          description: AI generation queued for asynchronous processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: AI generation queued
                  jobId:
                    type: string
                    example: job_123456
                  status:
                    type: string
                    example: processing

  /api/ai/regenerate:
    post:
      summary: Regenerate an existing post draft
      tags: [AI]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                  example: Benefits of remote work
                tone:
                  type: string
                  example: Casual
                platform:
                  type: string
                  enum: [X, LinkedIn, Facebook, Instagram]
                  example: X
      responses:
        '201':
          description: Post regenerated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post regenerated successfully
                  draft:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      generated:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time

  /api/ai/status/{jobId}:
    get:
      summary: Check status of an AI generation job
      tags: [AI]
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: Job ID returned from generate endpoint
      responses:
        '200':
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    example: job_123456
                  state:
                    type: string
                    enum: [waiting, active, completed, failed, delayed]
                    example: completed
                  progress:
                    type: integer
                    minimum: 0
                    maximum: 100
                    example: 100
                  result:
                    type: object
                    nullable: true
                    description: Generated draft (only present when completed)
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      platform:
                        type: string
                      tone:
                        type: string
                      generated:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00.000Z"
        '404':
          description: Job not found

  /api/ai/usage/me:
    get:
      summary: Get current user's AI usage statistics
      tags: [AI Usage]
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
          description: Start date for usage query (YYYY-MM-DD)
        - name: to
          in: query
          schema:
            type: string
            format: date
          description: End date for usage query (YYYY-MM-DD)
      responses:
        '200':
          description: Usage statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_generations:
                    type: integer
                    example: 25
                  total_tokens:
                    type: integer
                    example: 15000
                  total_cost_usd:
                    type: string
                    example: "0.007500"
                  daily_usage:
                    type: integer
                    example: 3
                  remaining_today:
                    type: integer
                    example: 7
                  recent_activity:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        userId:
                          type: string
                        model:
                          type: string
                          example: gemini-2.5-flash
                        tokensUsed:
                          type: integer
                        costUSD:
                          type: number
                          format: float
                        createdAt:
                          type: string
                          format: date-time

  /api/ai/usage/all:
    get:
      summary: Get all users' AI usage statistics (Admin only)
      tags: [AI Usage]
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
          description: Start date for usage query (YYYY-MM-DD)
        - name: to
          in: query
          schema:
            type: string
            format: date
          description: End date for usage query (YYYY-MM-DD)
      responses:
        '200':
          description: All users' usage statistics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                    model:
                      type: string
                      example: gemini-2.5-flash
                    total_generations:
                      type: integer
                      example: 150
                    total_tokens:
                      type: integer
                      example: 90000
                    total_cost_usd:
                      type: string
                      example: "0.045000"
                    user:
                      type: object
                      properties:
                        username:
                          type: string
                        email:
                          type: string
        '403':
          description: Admin access required

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
