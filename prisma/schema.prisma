// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User schema

model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  password_hash     String
  role              String   @default("user")
  subscriptionId    String?           @map("subscription_id")
  subscription      SubscriptionPlan? @relation(fields: [subscriptionId], references: [id])
  created_at          DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  posts             Post[]
  sessions          UserSession[]
  logins            PendingLogin[]
  passwordResets    PasswordReset[]
  drafts            Draft[]
  aiUsages          AIUsage[]
  aiCaches          AICache[]
}

// Pending login schema
model PendingLogin {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  code       String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}


// Post schema
model Post {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  content     String
  platform    String   // -> "X", "linkedin", Instagram etc.
  status      String   @default("draft") // draft | scheduled | published
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Connection schema 
model Connection {
  id         String @id @default(uuid())
  userId     String
  provider   String // e.g. "x", "linkedin"
  accessToken String
  refreshToken String?
  createdAt  DateTime @default(now())
}

// User session schema
model UserSession {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

// Password reset schema
model PasswordReset {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  code       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

// Draft creation schema
model Draft {
  id                  String   @id @default(uuid())
  title               String?
  content             String?
  tone                String?      // e.g., "Formal", "Witty", etc
  platform            String?      // "X", "LinkedIn", etc
  generated           Boolean  @default(false)
  status              String   @default("draft")
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  localLastUpdatedAt  DateTime?
  serverLastUpdatedAt DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// AI usage schema
model AIUsage {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  model      String
  tokensUsed Int
  costUSD    Float
  createdAt  DateTime @default(now())
  date       DateTime @default(now()) // For daily limit checks
}

// AI caching schema
model AICache {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id]) // added relation back to User
  topic      String
  tone       String?
  platform   String?
  content    String
  model      String
  createdAt  DateTime @default(now())

  @@unique([userId, topic, tone, platform]) // unique per user/platform combo
}

// User Subscription
model SubscriptionPlan {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String?
  dailyLimit        Int      @default(10) // AI generations per day
  monthlyPriceUSD   Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users             User[]
}